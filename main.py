# -*- coding: utf-8 -*-
import os
import sys
import time
from datetime import datetime

import telebot
from telebot.util import async_dec

import gonal_database as database
import gonal_payment as payment
import gonal_strings as string_help
from src import gonal_admin as admin
from src import gonal_booking as booking
from src import gonal_item as item_menu
from src import gonal_keyboards as keyboards
from src import gonal_stat as statistics
from src import gonal_support as support
from src.gonal_const import *

bot = telebot.AsyncTeleBot(admin.TOKEN, parse_mode="MARKDOWN")

admin_keyboard = admin.admin_keyboard
user_keyboard = admin.user_keyboard

database.open_db()

qiwi = payment.Qiwi()
yoomoney = payment.YooMoney()

support = support.Support()
stat = statistics.Stat()

global item_creator
item_creator = item_menu.ItemCreator()
global item_editor
item_editor = item_menu.ItemEditor(-1)


@bot.message_handler(commands=['start'])
def start_message(message):
    if database.input_user(message.chat.id) is True:
        msg = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ï—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –∫–Ω–æ–ø–∫–∏, –Ω–∞–ø–∏—à–∏—Ç–µ /start."
    else:
        msg = f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, @{message.from_user.username}!"

    if admin.is_admin(message.from_user.id):
        bot.send_message(message.chat.id, msg, reply_markup=admin_keyboard, parse_mode="HTML")
    else:
        bot.send_message(message.chat.id, msg, reply_markup=user_keyboard, parse_mode="HTML")




# –ö—É–ø–∏—Ç—å
@bot.message_handler(regexp=BUY)
def buy_message(message):
    keyboard, count = keyboards.get_categories("select_category")
    keyboard.add(keyboards.CLOSE_BTN)
    if count:
        bot.send_message(message.from_user.id, "üìÇ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=keyboard)
    else:
        bot.send_message(message.from_user.id, "üòî –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")


# FAQ
@bot.message_handler(regexp=FAQ)
def faq_message(message):
    bot.send_message(message.chat.id, database.get_faq(), parse_mode="HTML")





# –ù–∞–ø–∏—Å–∞—Ç—å —Ç–∏–∫–µ—Ç –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
@bot.message_handler(regexp=REVIEW)
def review_message(message):
    if admin.is_admin(message.from_user.id):
        keyboard = telebot.types.ReplyKeyboardMarkup(True)
        keyboard.row(SUPPORT, SUPPORT_HISTORY)
        keyboard.row(SUPPORT_MES)
        keyboard.row(BACK)
        bot.send_message(message.chat.id, REVIEW, reply_markup=keyboard)
    else:
        bot.send_message(message.from_user.id, database.get_support_main_mes(), parse_mode="HTML")
        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboard.add(telebot.types.InlineKeyboardButton(text="‚ùì –í–æ–ø—Ä–æ—Å",
                                                        callback_data="support_user=‚ùì –í–æ–ø—Ä–æ—Å"))
        keyboard.add(telebot.types.InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∞",
                                                        callback_data="support_user=üí≥ –û–ø–ª–∞—Ç–∞"))
        keyboard.add(telebot.types.InlineKeyboardButton(text="üìö –¢–æ–≤–∞—Ä—ã",
                                                        callback_data="support_user=üìö –¢–æ–≤–∞—Ä—ã"))
        keyboard.add(telebot.types.InlineKeyboardButton(text="üìù –ü—Ä–æ—á–µ–µ",
                                                        callback_data="support_user=üìù –ü—Ä–æ—á–µ–µ"))
        keyboard.add(keyboards.CLOSE_BTN)
        bot.send_message(message.from_user.id, "üìù –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±—Ä–∞—â–µ–Ω–∏—è", reply_markup=keyboard)


# –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
# –ü—Ä–æ—á–µ–µ
@bot.message_handler(regexp=OTHER, func=lambda msg: admin.is_admin(msg.from_user.id))
def other_message(message):
    keyboard = telebot.types.ReplyKeyboardMarkup(True)
    keyboard.row(SENDING)
    keyboard.row(EDIT_FAQ)
    keyboard.row(BACK)
    bot.send_message(message.chat.id, OTHER, reply_markup=keyboard)


# –†–∞—Å—Å—ã–ª–∫–∏
@bot.message_handler(regexp=SENDING, func=lambda msg: admin.is_admin(msg.from_user.id))
def sending_message(message):
    bot.send_message(message.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏")
    bot.register_next_step_handler(message, create_sending)


# –û–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –±–µ–∑ –æ—Ç–≤–µ—Ç–∞
@bot.message_handler(regexp=SUPPORT, func=lambda msg: admin.is_admin(msg.from_user.id))
def support_message(message):
    support.generate_sup_mes(False)
    keyboard = support.get_support_msg(0)
    bot.send_message(message.from_user.id, "üë®‚Äçüíª –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤", reply_markup=keyboard)


# –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
@bot.message_handler(regexp=SUPPORT_HISTORY, func=lambda msg: admin.is_admin(msg.from_user.id))
def support_history_message(message):
    support.generate_sup_mes(True)
    keyboard = support.get_support_msg(0)
    bot.send_message(message.from_user.id, "üë®‚Äçüíª –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤", reply_markup=keyboard)


# –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
@bot.message_handler(regexp=SUPPORT_MES, func=lambda msg: admin.is_admin(msg.from_user.id))
def support_history_message(message):
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.add(telebot.types.InlineKeyboardButton(text="‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                                                    callback_data="edit_supmes"))
    bot.send_message(message.from_user.id, database.get_support_main_mes(), reply_markup=keyboard)


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FAQ
@bot.message_handler(regexp=EDIT_FAQ, func=lambda msg: admin.is_admin(msg.from_user.id))
def edit_faq_message(message):
    bot.send_message(message.from_user.id, "‚úí –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç FAQ")
    bot.register_next_step_handler(message, edit_faq)


# –†–∞–±–æ—Ç–∞ —Å —Ç–æ–≤–∞—Ä–æ–º
@bot.message_handler(regexp=ITEMS_WORK, func=lambda msg: admin.is_admin(msg.from_user.id))
def items_word_message(message):
    keyboard = telebot.types.ReplyKeyboardMarkup(True)
    keyboard.row(ADD_ITEM, EDIT_ITEM)
    keyboard.row(ADD_CATEGORY, DELETE_CATEGORY)
    keyboard.row(BACK)
    bot.send_message(message.chat.id, ITEMS_WORK, reply_markup=keyboard)


# –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
@bot.message_handler(regexp=ADD_ITEM, func=lambda msg: admin.is_admin(msg.from_user.id))
def add_item_message(message):
    keyboard, b = keyboards.get_categories("category")
    keyboard.add(keyboards.CLOSE_BTN)

    if b:
        bot.send_message(message.chat.id, "üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞", reply_markup=keyboard)
    else:
        bot.send_message(message.chat.id, "üòî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π")


# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏
@bot.message_handler(regexp=EDIT_ITEM, func=lambda msg: admin.is_admin(msg.from_user.id))
def edit_item_name(message):
    keyboard, b = keyboards.get_categories("cat_edit")
    keyboard.add(keyboards.CLOSE_BTN)

    if b:
        bot.send_message(message.chat.id, "üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞", reply_markup=keyboard)
    else:
        bot.send_message(message.chat.id, "üòî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π")


# –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
@bot.message_handler(regexp=ADD_CATEGORY, func=lambda msg: admin.is_admin(msg.from_user.id))
def add_category_message(message):
    keyboard, b = keyboards.get_categories("sub_cat_add")

    keyboard.add(telebot.types.InlineKeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                                                    callback_data="category=new_category"))
    keyboard.add(keyboards.CLOSE_BTN)
    bot.send_message(message.chat.id, "üìÇ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \n"
                                      "üìÅ –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é*",
                     reply_markup=keyboard)


# –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
@bot.message_handler(regexp=DELETE_CATEGORY, func=lambda msg: admin.is_admin(msg.from_user.id))
def delete_category_message(message):
    keyboard, b = keyboards.get_categories("category_del")
    keyboard.add(keyboards.CLOSE_BTN)
    if b:
        bot.send_message(message.chat.id, "üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=keyboard)
    else:
        bot.send_message(message.chat.id, "üòî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π")


# –†–∞–±–æ—Ç–∞ —Å –∫–æ—à–µ–ª—å–∫–∞–º–∏
@bot.message_handler(regexp=WORK_PAY, func=lambda msg: admin.is_admin(msg.from_user.id))
def work_pay_message(message):
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.add(telebot.types.InlineKeyboardButton(text="ü•ù QIWI", callback_data="payment=qiwi"))
    keyboard.add(telebot.types.InlineKeyboardButton(text="üí≥ YooMoney", callback_data="payment=yoomoney"))
    keyboard.add(keyboards.CLOSE_BTN)

    bot.send_message(message.chat.id, "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫", reply_markup=keyboard)


# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@bot.message_handler(regexp=STAT, func=lambda msg: admin.is_admin(msg.from_user.id))
def stat_message(message):
    keyboard = telebot.types.ReplyKeyboardMarkup(True)
    keyboard.row(REPORT, GENERAL)
    keyboard.row(BACK)
    bot.send_message(message.chat.id, STAT, reply_markup=keyboard)


# –û—Ç—á–µ—Ç—ã
@bot.message_handler(regexp=REPORT, func=lambda msg: admin.is_admin(msg.from_user.id))
def report_message(message):
    stat.create_date_list()
    keyboard = stat.get_stat_page(0)

    bot.send_message(message.from_user.id, "üìÜ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ—Ç—á–µ—Ç–∞", reply_markup=keyboard)


# –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@bot.message_handler(regexp=GENERAL, func=lambda msg: admin.is_admin(msg.from_user.id))
def general_stat_message(message):
    keyboard = telebot.types.InlineKeyboardMarkup()

    keyboard.add(keyboards.CLOSE_BTN)
    bot.send_message(message.from_user.id, stat.get_all_stat(), reply_markup=keyboard)


# –ù–∞–∑–∞–¥
@bot.message_handler(regexp=BACK)
def back_message(message):
    if admin.is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "üîπ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üîπ", reply_markup=admin_keyboard)
    else:
        bot.send_message(message.chat.id, "üîπ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üîπ", reply_markup=user_keyboard)


# –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    if admin.is_admin(message.from_user.id):
        bot.send_message(message.from_user.id, "‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞! –í–≤–µ–¥–∏—Ç–µ /start",
                         reply_markup=admin_keyboard)
    else:
        bot.send_message(message.from_user.id, "‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞! –í–≤–µ–¥–∏—Ç–µ /start",
                         reply_markup=user_keyboard)


# –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞–º
@async_dec()
def send_admin_mes(message):
    for i in range(len(admin.ADMIN_ID)):
        bot.send_message(admin.ADMIN_ID[i], message, parse_mode="HTML")


@bot.callback_query_handler(func=lambda call: call.data.split("=")[0] in admin.user_methods)
def user_callback(call):
    call_data = call.data.split("=")

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if call_data[0] == "main_menu":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        keyboard, count = keyboards.get_categories("select_category")
        keyboard.add(keyboards.CLOSE_BTN)
        if count:
            bot.send_message(call.message.chat.id, "üìÇ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", reply_markup=keyboard)
        else:
            bot.send_message(call.message.chat.id, "üòî –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")

    # –í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    elif call_data[0] == "select_category":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        keyboard, count = keyboards.get_subcategories("select_subcat", call_data[1])
        keyboard, items = keyboards.get_items(keyboard, call_data[1], "", "selected_item")

        keyboard.row(telebot.types.InlineKeyboardButton(text=BACK, callback_data="main_menu"),
                     keyboards.CLOSE_BTN)

        if count is True or items is True:
            bot.send_message(call.message.chat.id, "üìô –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã", reply_markup=keyboard)
        else:
            bot.send_message(call.message.chat.id,
                             "üòî –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", reply_markup=keyboard)

    # –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è
    elif call_data[0] == "select_subcat":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        categories = call_data[1].split("|")

        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboard, count = keyboards.get_items(keyboard, categories[1], categories[0], "selected_item")

        keyboard.add(telebot.types.InlineKeyboardButton(text=BACK,
                                                        callback_data=f"select_category={str(categories[1])}"),
                     keyboards.CLOSE_BTN)
        if count:
            bot.send_message(call.message.chat.id, "üìô –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã", reply_markup=keyboard)
        else:
            bot.send_message(call.message.chat.id,
                             "üòî –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", reply_markup=keyboard)

    # –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
    elif call_data[0] == "selected_item":
        bot.delete_message(call.message.chat.id, call.message.message_id)

        item = database.get_item_by_id(call_data[1])

        item_name = str(item[1])
        item_desc = str(item[2])
        item_price = str(item[3])
        item_category = str(item[4])
        item_subcategory = str(item[5])
        item_count = item[6] - booking.get_booking(item_name)

        keyboard = telebot.types.InlineKeyboardMarkup(row_width=5)

        if str(item[5]) == "":
            method_back = f"select_category={item_category}"
        else:
            method_back = f"select_subcat={item_subcategory}|{item_category}"

        method_buy = f"select_pay={str(call_data[1])}|"

        if item[6] != 0:
            btn_list = []

            i = 0
            while i < 10 and i < item_count:
                i += 1
                count_str = str(i)
                btn_list.append(telebot.types.InlineKeyboardButton(text=f"{count_str} —à—Ç.",
                                                                   callback_data=f"{method_buy}{count_str}"))

            keyboard.add(*btn_list)
            if i < item_count:
                keyboard.row(telebot.types.InlineKeyboardButton(text="üõí –°–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ",
                                                                callback_data=f"your_count={str(call_data[1])}|{item_count}"))

            msg = string_help.get_info_message(item_name, item_desc, item_price, item_count)
        else:
            msg = "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ —Å–µ–π—á–∞—Å –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏"

        keyboard.row(telebot.types.InlineKeyboardButton(text=BACK, callback_data=method_back), keyboards.CLOSE_BTN)

        bot.send_message(call.message.chat.id, msg,
                         reply_markup=keyboard)

    # —Å–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    elif call_data[0] == "your_count":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        temp = call_data[1].split("|")
        limit = int(temp[1])
        if limit > 15:
            limit = 15

        bot.send_message(call.message.chat.id, f"üõí –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞:\n"
                                               f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ: 1\n"
                                               f"–ú–∞—Å–∫–∏–º–∞–ª—å–Ω–æ–µ: {limit}")
        bot.register_next_step_handler(call.message, check_count, temp[0], limit)

    # –≤—ã–±–æ—Ä –æ–ø–ª–∞—Ç—ã
    elif call_data[0] == "select_pay":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        select_pay(call.message, call_data[1])

    # –ü–æ–∫—É–ø–∫–∞
    elif call_data[0] == "buy_item":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        buy_item(call.message, call_data[1])

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã
    elif call_data[0] == "check_pay":
        temp_data = call_data[1].split("|")
        pay_method = temp_data[0]
        comment = temp_data[1]
        count_buy = int(temp_data[3])

        item = database.get_item_by_id(temp_data[2])

        item_name = item[1]
        item_price = item[3]

        amount = int(item_price) * count_buy

        is_buy_item = False

        if pay_method == "qiwi":
            is_buy_item = qiwi.payment_ver(comment, amount)
        elif pay_method == "yoo":
            is_buy_item = yoomoney.payment_ver(comment, amount)

        if is_buy_item:
            item_data = []

            for i in range(count_buy):
                item_id = database.get_item_id(item_name)
                if item_id == -1:
                    bot.delete_message(call.message.chat.id, call.message.message_id)
                    message = "‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Ç–æ–≤–∞—Ä–∞ ‚ùó\n" \
                              "–í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä —É–∂–µ —É—Å–ø–µ–ª–∏ –∫—É–ø–∏—Ç—å –∏ –æ–Ω –∑–∞–∫–æ–Ω—á–∏–ª—Å—è‚ùó\n" \
                              "–í–∞–º –Ω–∞–ø–∏—à–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–∞–≥–∞–∑–∏–Ω–∞"

                    bot.send_message(call.message.chat.id, message)
                    message = "<b>‚ùó –ù–µ –ø—Ä–æ—à–ª–∞ –ø–æ–∫—É–ø–∫–∞ ‚ùó</b>\n" \
                              f"üîπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{call.message.chat.username}\n" \
                              f"üîπ –¢–æ–≤–∞—Ä: {item_name}\n" \
                              f"üîπ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count_buy}\n" \
                              f"üîπ –°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: {amount}\n" \
                              f"üîπ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ–ø–ª–∞—Ç–µ: {comment}"
                    send_admin_mes(message)
                    continue

                item_data_str = f"{database.get_item_data(item_id)}"
                item_data.append(item_data_str)

                date = datetime.now()
                day = date.day
                month = date.month
                year = date.year
                format_date = f"{day}/{month}/{year}"

                database.input_info_buy(call.message.chat.id, item_name, item_id,
                                        comment, item_price, item_data_str, format_date)

            msg = string_help.get_sold_message(call.message.chat.username, item_name, amount)

            bot.delete_message(call.message.chat.id, call.message.message_id)

            format_data = ""
            for i in range(len(item_data)):
                temp_data = item_data[i]

                parse_data = temp_data[0:7]
                if parse_data == "[file]=":
                    split = temp_data.split(parse_data)
                    src = split[1]

                    bot.send_document(call.message.chat.id,
                                      open(src, "rb"),
                                      caption=f"‚ú® –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤–∞—Å —Å –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ–º {item_name} \n",
                                      parse_mode="HTML")
                else:
                    format_data += f"{item_data[i]}\n"

            bot.send_message(call.message.chat.id,
                             text=f"‚ú® –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤–∞—Å —Å –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ–º {item_name} \n"
                                  f"üéÅ –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞:\n<b>{format_data}</b>", parse_mode="HTML")

            msg += f"\nüîπ –î–∞–Ω–Ω—ã–µ:\n{format_data}"

            send_admin_mes(msg)

            booking.del_booking(call.message.chat.id)
        else:
            bot.answer_callback_query(callback_query_id=call.id, show_alert=True,
                                      text="‚ùó –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚ùó\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")

    # –û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
    elif call_data[0] == "support_user":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, "‚úè –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è")
        bot.register_next_step_handler(call.message, send_support, call_data[1])


@bot.callback_query_handler(func=lambda call: call.data.split("=")[0] in admin.admin_methods)
def admin_callback(call):
    call_data = call.data.split("=")

    bot.delete_message(call.message.chat.id, call.message.message_id)
    if admin.is_admin(call.message.chat.id) is False:
        bot.send_message(call.message.chat.id, "! –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–¥–Ω—ã !")
        return

    # # # # # # # # #
    # –ê–¥–º–∏–Ω –ö–æ–º–∞–Ω–¥—ã
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
    if call_data[0] == "category":
        global category_creator
        category_creator = item_menu.CategoryCreator()

        if call_data[1] == "new_category":
            bot.send_message(call.message.chat.id, "üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n*–û–¥–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è - –û–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞*")
            bot.register_next_step_handler(call.message, new_category)
        else:
            item_creator.clear()
            item_creator.category = call_data[1]

            keyboard, b = keyboards.get_subcategories("subitem_add", call_data[1])

            keyboard.row(telebot.types.InlineKeyboardButton(text="üìö –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä",
                                                            callback_data=f"add_item={call_data[1]}"),
                         keyboards.CLOSE_BTN)
            bot.send_message(call.message.chat.id,
                             "üìï –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–æ–≤–∞—Ä–∞ \n–ò–ª–∏ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –¥–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                             reply_markup=keyboard)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    elif call_data[0] == "sub_cat_add":
        keyboard = telebot.types.InlineKeyboardMarkup()
        list_sub = ""

        subcategory_list = database.get_subcategories(call_data[1])
        for i in range(len(subcategory_list)):
            list_sub += f"‚ñ™ {subcategory_list[i][1]}\n"

        keyboard.row(telebot.types.InlineKeyboardButton(
            text="üìù –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data=f"new_subcategory={call_data[1]}"),
            keyboards.CLOSE_BTN)

        bot.send_message(call.message.chat.id,
                         f"üìÇ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \n{list_sub}", reply_markup=keyboard)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    elif call_data[0] == "new_subcategory":
        category_creator.category = call_data[1]

        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, "üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n"
                                               "*–û–¥–Ω–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è - –û–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞*")
        bot.register_next_step_handler(call.message, new_subcategory)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    # –í –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é
    elif call_data[0] == "subitem_add":
        item_creator.subcategory = call_data[1].split("|")[0]

        bot.send_message(call.message.chat.id, "üìö –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
        bot.register_next_step_handler(call.message, add_item_name)

    # –í –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    elif call_data[0] == "add_item":
        item_creator.subcategory = ""

        bot.send_message(call.message.chat.id, "üìö –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
        bot.register_next_step_handler(call.message, add_item_name)

    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
    elif call_data[0] == "all_cat_edit":
        keyboard, b = keyboards.get_categories("cat_edit")
        keyboard.add(keyboards.CLOSE_BTN)
        if b:
            bot.send_message(call.message.chat.id, "üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞", reply_markup=keyboard)
        else:
            bot.send_message(call.message.chat.id, "üòî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π")

    elif call_data[0] == "cat_edit":
        keyboard, count = keyboards.get_subcategories("subcat_edit", call_data[1])
        keyboard, items = keyboards.get_items(keyboard, call_data[1], "", "item_edit")
        keyboard.row(telebot.types.InlineKeyboardButton(text=BACK, callback_data="all_cat_edit"),
                     keyboards.CLOSE_BTN)

        if count is True or items is True:
            bot.send_message(call.message.chat.id, "üìô –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã", reply_markup=keyboard)
        else:
            bot.send_message(call.message.chat.id,
                             "üòî –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", reply_markup=keyboard)

    elif call_data[0] == "subcat_edit":
        categories = call_data[1].split("|")

        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboard, count = keyboards.get_items(keyboard, categories[1], categories[0], "item_edit")

        keyboard.row(telebot.types.InlineKeyboardButton(text=BACK,
                                                        callback_data=f"cat_edit={str(categories[1])}"),
                     keyboards.CLOSE_BTN)
        if count:
            bot.send_message(call.message.chat.id, "üìô –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã", reply_markup=keyboard)
        else:
            bot.send_message(call.message.chat.id,
                             "üòî –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", reply_markup=keyboard)

    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    elif call_data[0] == "item_edit":
        get_item_msg(call.message, call_data[1])

    elif call_data[0] == "edit_name":
        bot.send_message(call.message.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ –∏–º—è")
        bot.register_next_step_handler(call.message, edit_name)

    elif call_data[0] == "edit_desc":
        bot.send_message(call.message.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ")
        bot.register_next_step_handler(call.message, edit_desc)

    elif call_data[0] == "edit_price":
        bot.send_message(call.message.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É")
        bot.register_next_step_handler(call.message, edit_price)

    elif call_data[0] == "get_data":
        keyboard = item_editor.get_item_all_data(call_data[1])
        bot.send_message(call.message.chat.id, "üìô –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã", reply_markup=keyboard)

    elif call_data[0] == "select_data":
        get_item_data(call.message, call_data[1])

    elif call_data[0] == "edit_data":
        bot.send_message(call.message.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ")
        bot.register_next_step_handler(call.message, edit_data)

    elif call_data[0] == "delete_data":
        item_editor.delete_data()
        keyboard = item_editor.get_item_all_data(item_editor.last_page)
        bot.send_message(call.message.chat.id, "üìô –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã", reply_markup=keyboard)

    elif call_data[0] == "add_item_data":
        bot.send_message(call.message.chat.id, "üîê –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ \n*–û–¥–∏–Ω —Ç–æ–≤–∞—Ä - –û–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞* \n"
                                               "üíæ –ò–ª–∏ –∂–µ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∞—Ä—Ö–∏–≤—ã –∏–ª–∏ —Ñ–∞–π–ª—ã —Å —Ç–æ–≤–∞—Ä–æ–º (–¥–æ *10 —à—Ç—É–∫*)\n"
                                               "‚ùó *–û–ø–∞—Å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è*. –í–æ–∑–º–æ–∂–Ω—ã –≤—ã–ø–∞–¥–µ–Ω–∏—è –±–æ—Ç–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ/–ø—Ä–æ–¥–∞–∂–µ —Ñ–∞–π–ª–æ–≤. –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –µ—â–µ –≤ –±–µ—Ç–∞-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏‚ùó")
        bot.register_next_step_handler(call.message, add_data)

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    elif call_data[0] == "!del_item":
        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboard.add(
            telebot.types.InlineKeyboardButton(text=YES, callback_data=f"del_item={call_data[1]}"))
        keyboard.add(
            telebot.types.InlineKeyboardButton(text=NO, callback_data="cancel"))

        bot.send_message(call.message.chat.id, f"‚ùì –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä ‚ùì", reply_markup=keyboard)
    elif call_data[0] == "del_item":
        database.delete_item(call_data[1])
        bot.send_message(call.message.chat.id, f"‚ùó –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω ‚ùó")

    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    elif call_data[0] == "category_del":
        keyboard, b = keyboards.get_subcategories("!del_subcat", call_data[1])
        keyboard.add(telebot.types.InlineKeyboardButton(text="üö´ –£–¥–∞–ª–∏—Ç—å –≤—Å—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                                                        callback_data=f"!del_cat={str(call_data[1])}"))
        bot.send_message(call.message.chat.id, "üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=keyboard)

    # —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    elif call_data[0] == "!del_cat":
        keyboard = telebot.types.InlineKeyboardMarkup()

        keyboard.add(
            telebot.types.InlineKeyboardButton(text=YES, callback_data=f"del_cat={call_data[1]}"))
        keyboard.add(
            telebot.types.InlineKeyboardButton(text=NO, callback_data="cancel"))

        bot.send_message(call.message.chat.id, f"‚ùì –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é *{database.get_category(call_data[1])}*‚ùì \n"
                                               "*–ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –í–°–ï –¢–û–í–ê–†–´ –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏*", reply_markup=keyboard)
    elif call_data[0] == "del_cat":
        database.delete_category(call_data[1])
        bot.send_message(call.message.chat.id, f"‚ùó –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞ ‚ùó")

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    elif call_data[0] == "!del_subcat":
        cat = call_data[1].split("|")

        keyboard = telebot.types.InlineKeyboardMarkup()
        subcategory_list = database.get_subcategory(cat[0])
        keyboard.add(
            telebot.types.InlineKeyboardButton(text=YES, callback_data=f"del_subcat={call_data[1]}"))
        keyboard.add(
            telebot.types.InlineKeyboardButton(text=NO, callback_data="cancel"))

        bot.send_message(call.message.chat.id, f"‚ùì –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é *{subcategory_list}*‚ùì \n"
                                               "*–ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –í–°–ï –¢–û–í–ê–†–´ –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏*", reply_markup=keyboard)
    elif call_data[0] == "del_subcat":
        cat = call_data[1].split("|")
        database.delete_subcategory(cat[0], cat[1])
        bot.send_message(call.message.chat.id, f"‚ùó –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞")

    # —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ –≤—Å–µ–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
    elif call_data[0] == "get_support":
        temp_data = call_data[1].split("|")

        keyboard = support.get_support_msg(temp_data[1])
        bot.send_message(call.message.chat.id, "üë®‚Äçüíª –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤", reply_markup=keyboard)

    elif call_data[0] == "select_support":
        msg, keyboard = support.get_sup_msg(call_data[1])
        bot.send_message(call.message.chat.id, msg, reply_markup=keyboard)

    # –û—Ç–≤–µ—Ç –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ
    elif call_data[0] == "ans_sup":
        bot.send_message(call.message.chat.id, "‚úè –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç")
        bot.register_next_step_handler(call.message, send_support_answer, call_data[1].split("|")[0])

    # –£–¥–∞–ª–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ
    elif call_data[0] == "del_sup":
        database.delete_support(call_data[1])

    # —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    elif call_data[0] == "edit_supmes":
        bot.send_message(call.message.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        bot.register_next_step_handler(call.message, edit_sup_mes)

    # —Å–ª–µ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç—á–µ—Ç–∞
    elif call_data[0] == "get_report":
        keyboard = stat.get_stat_page(call_data[1])
        bot.send_message(call.message.chat.id, "üìÜ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ—Ç—á–µ—Ç–∞", reply_markup=keyboard)

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á–µ—Ç–∞
    elif call_data[0] == "report":
        msg, keyboard = stat.get_report(call_data[1])
        bot.send_message(call.message.chat.id, msg, reply_markup=keyboard)

    # –ö–æ—à–µ–ª—å–∫–∏
    elif call_data[0] == "payment":
        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboard.add(telebot.types.InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å",
                                                        callback_data=f"check={call_data[1]}"))
        keyboard.add(telebot.types.InlineKeyboardButton(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫",
                                                        callback_data=f"edit={call_data[1]}"))
        if call_data[1] == "qiwi":
            bot.send_message(call.message.chat.id, "ü•ù QIWI-–ö–æ—à–µ–ª–µ–∫", reply_markup=keyboard)
        elif call_data[1] == "yoomoney":
            bot.send_message(call.message.chat.id, "üí≥ YooMoney", reply_markup=keyboard)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—à–µ–ª—å–∫–æ–≤
    elif call_data[0] == "check":
        if call_data[1] == "qiwi":
            if qiwi.check_available():
                bot.send_message(call.message.chat.id, "‚úÖ –ö–æ—à–µ–ª–µ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                bot.send_message(call.message.chat.id, "‚ùó –ö–æ—à–µ–ª–µ–∫ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–∑–º–µ–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω ‚ùó")
        elif call_data[1] == "yoomoney":
            if yoomoney.check_yoo():
                bot.send_message(call.message.chat.id, "‚úÖ –ö–æ—à–µ–ª–µ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                bot.send_message(call.message.chat.id, "‚ùó –ö–æ—à–µ–ª–µ–∫ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–∑–º–µ–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω ‚ùó")

    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–æ–≤
    elif call_data[0] == "edit":
        if call_data[1] == "qiwi":
            bot.send_message(call.message.chat.id, "‚úè –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞")
            bot.register_next_step_handler(call.message, qiwi_payment)
        elif call_data[1] == "yoomoney":
            bot.send_message(call.message.chat.id, "‚úè –í–≤–µ–¥–∏—Ç–µ client id")
            bot.register_next_step_handler(call.message, yoo_client)

@bot.callback_query_handler(func=lambda call: True)
def cancel_handler(call):
    if call.data == "cancel":
        bot.delete_message(call.message.chat.id, call.message.message_id)
    else:
        bot.send_message(call.message.chat.id, "! Bad Request !")


# –∏–Ω—Ñ–∞ –æ —Ç–æ–≤–∞—Ä–µ
def get_item_msg(message, id):
    global item_editor
    item_editor = item_menu.ItemEditor(id)
    bot.send_message(message.chat.id, item_editor.get_text(), reply_markup=item_editor.get_keyboard(),
                     parse_mode="HTML")


def get_item_data(message, id):
    msg, keyboard = item_editor.select_data(id)
    bot.send_message(message.chat.id, msg, reply_markup=keyboard, parse_mode="HTML")


# FAQ
def edit_faq(message):
    if not_const(message.text):
        database.input_faq(message.text)
        bot.send_message(message.from_user.id, "‚Ñπ FAQ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
    else:
        bot.send_message(message.from_user.id, "‚ùó –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö ‚ùó")
        return


# –†–∞—Å—Å—ã–ª–∫–∞
@async_dec()
def create_sending(message):
    user_list = database.get_user_list()
    all_send_mes = 0
    limit = 0

    if message.photo is not None or message.document is not None:
        sending_text = message.caption
        folder = "sendings"
        if os.path.exists(folder) is False:
            os.mkdir(folder)

        if message.photo is not None:
            file_info = bot.get_file(message.photo[-1].file_id)
            name = message.photo[1].file_unique_id
        else:
            file_info = bot.get_file(message.document.file_id)
            name = message.document.file_unique_id

        file_info = file_info.wait()
        downloaded_file = bot.download_file(file_info.file_path)
        downloaded_file = downloaded_file.wait()

        src = f"{folder}/{name}"
        with open(src, 'wb') as new_file:
            new_file.write(downloaded_file)

        if not_const(sending_text):
            for i in range(len(user_list)):
                try:
                    if limit <= 20:
                        bot.send_photo(user_list[i][0],
                                       photo=open(src, "rb"),
                                       caption=sending_text,
                                       parse_mode="HTML")
                        limit += 1
                        all_send_mes += 1
                    else:
                        limit = 0
                        time.sleep(2)
                except:
                    continue
        else:
            bot.send_message(message.from_user.id, "‚ùó –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö ‚ùó")
            return
    else:
        sending_text = message.text

        if not_const(sending_text):
            for i in range(len(user_list)):
                try:
                    if limit <= 20:
                        bot.send_message(user_list[i][0], sending_text, parse_mode="HTML")
                        limit += 1
                        all_send_mes += 1
                    else:
                        limit = 0
                        time.sleep(2)
                except:
                    continue
        else:
            bot.send_message(message.from_user.id, "‚ùó –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö ‚ùó")
            return

    bot.send_message(message.from_user.id, string_help.get_text_send(all_send_mes))


# –¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
def send_support(message, support_theme):
    if not_const(message.text):
        if message.text is not None:
            id_user = message.chat.id
            support_mess = message.text

            database.send_appeal(id_user, support_mess, support_theme)

            msg = "üì¢üêò <b>–õ–æ—à–∞—Ä–∞ –Ω–∞–ø–∏—Å–∞–ª!</b>\n" \
                  f"üîπ ID –ª–æ—Ö–∞: <b>{message.from_user.username}</b>\n" \
                  f"üîπ –¢–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è: {support_theme}\n" \
                  f"üîπ –°–æ–æ–±—â–µ–Ω–∏–µ: {support_mess}"

            send_admin_mes(msg)

            bot.send_message(message.from_user.id,
                             "‚úÖ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –±—ã–ª–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ\n‚è≤–ñ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è")
        else:
            bot.send_message(message.from_user.id, "‚ùó –û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º ‚ùó")
            return
    else:
        bot.send_message(message.from_user.id, "‚ùó –û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤ —Å–µ–±–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ ‚ùó")
        return


# –û—Ç–≤–µ—Ç –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ
def send_support_answer(message, id_chat):
    if not_const(message.text):
        answer = str(message.text)
        user_id = database.send_appeal_answer(id_chat, answer)
        mes = f"‚úÖ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –±—ã–ª–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ: \n\n" + answer

        bot.send_message(user_id, mes)
        send_admin_mes(f"{message.chat.username} –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ—Ç {user_id} \n{answer}")
    else:
        bot.send_message(message.from_user.id, "‚ùó –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö ‚ùó")
        return


# —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
def edit_sup_mes(message):
    msg = str(message.text)

    if not_const(msg):
        database.input_sup_mes(msg)
        bot.send_message(message.from_user.id, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
    else:
        bot.send_message(message.from_user.id, "‚ùó –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö ‚ùó")
        return


# –ö–æ—à–µ–ª—å–∫–∏
# QIWI
def qiwi_payment(message):
    if not_const(message.text):
        bot.send_message(message.from_user.id, "‚úè –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω QIWI")
        bot.register_next_step_handler(message, qiwi_token_payment, message.text)
    else:
        bot.send_message(message.from_user.id, "‚ùó –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö ‚ùó")
        return


# —Ç–æ–∫–µ–Ω
def qiwi_token_payment(message, qiwi_number):
    try:
        bot.delete_message(message.chat.id, message.message_id)
        qiwi_update = qiwi.check_available_data(message.text, qiwi_number)
        if qiwi_update:
            database.input_qiwi(message.text, qiwi_number)
            qiwi.update()
            bot.send_message(message.from_user.id, "üîê –¢–æ–∫–µ–Ω –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!")
        else:
            bot.send_message(message.from_user.id, "‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω ‚ùó")

    except:
        bot.delete_message(message.chat.id, message.message_id)
        bot.send_message(message.from_user.id, "‚ùó –û—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞ ‚ùó")


# YooMoney
# client_id
def yoo_client(message):
    if not_const(message.text):
        global client_id
        client_id = message.text
        bot.send_message(message.from_user.id,
                         "‚úè –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é –≤—ã —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        bot.register_next_step_handler(message, yoo_redirect)
    else:
        bot.send_message(message.from_user.id, "‚ùó –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö ‚ùó")
        return


# –ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è
def yoo_redirect(message):
    if not_const(message.text):
        global redirect
        redirect = message.text

        link = yoomoney.gen_auth(client_id, redirect)
        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboard.add(telebot.types.InlineKeyboardButton(
            text="üíª –ê–∫—Ç–∏–≤–∞—Ü–∏—è", url=link
        ))
        bot.send_message(message.chat.id, "‚ùó –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É "
                                          "–ø–æ—Å–ª–µ –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏–∏.\n"
                                          "‚ùó –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—É—á–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏ *1 –º–∏–Ω—É—Ç–∞*", reply_markup=keyboard)
        bot.register_next_step_handler(message, yoo_url)
    else:
        bot.send_message(message.from_user.id, "‚ùó –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö ‚ùó")
        return


# –ü–æ–ª—É—á–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞
def yoo_url(message):
    if not_const(message.text):
        result = yoomoney.gen_token(message.text)
        if result:
            bot.send_message(message.from_user.id, "üîê –¢–æ–∫–µ–Ω –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!")
        else:
            bot.send_message(message.from_user.id, "‚ùó –û—à–∏–±–∫–∞ –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ ‚ùó")
    else:
        bot.send_message(message.from_user.id, "‚ùó –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö ‚ùó")
        return


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ / –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
# –ö–∞—Ç–µ–≥–æ—Ä–∏—è
def new_category(message):
    category_creator.category = str(message.text)
    bot.send_message(message.from_user.id,
                     string_help.get_text_cat(category_creator.create_category()))


# –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è
def new_subcategory(message):
    category_creator.subcategory = str(message.text)
    bot.send_message(message.from_user.id,
                     string_help.get_text_cat(category_creator.create_subcategory()))


# –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
def check_count(message, item_id, limit):
    try:
        user_count = int(message.text)

        if int(limit) >= user_count > 0:
            select_pay(message, f"{item_id}|{user_count}")
        else:
            bot.send_message(message.from_user.id, "‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞")
    except Exception:
        bot.send_message(message.from_user.id, "‚ùó –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö ‚ùó")
        return


# –≤—ã–±–æ—Ä –æ–ø–ª–∞—Ç—ã
def select_pay(message, data):
    keyboard = telebot.types.InlineKeyboardMarkup()
    available = False

    if qiwi.check_available():
        keyboard.add(telebot.types.InlineKeyboardButton(
            text="ü•ù QIWI", callback_data=f"buy_item={data}|qiwi"))
        available = True

    if yoomoney.check_yoo():
        keyboard.add(telebot.types.InlineKeyboardButton(
            text="üí≥ YooMoney", callback_data=f"buy_item={data}|yoo"))
        available = True

    keyboard.add(telebot.types.InlineKeyboardButton(text=CLOSE, callback_data=f"cancel"))
    if available:
        msg = "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã"
    else:
        msg = "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ–ø–ª–∞—Ç–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç \n –ü—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è"

    bot.send_message(message.chat.id, msg, reply_markup=keyboard)


# –ø–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞
def buy_item(message, data):
    booking.create_booking(message.chat.id)

    temp_data = data.split("|")

    item_id = temp_data[0]
    count_buy = int(temp_data[1])
    pay_method = temp_data[2]

    if not qiwi.check_available():
        bot.send_message(message.chat.id,
                         "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –æ–ø–ª–∞—Ç–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç \n –ü—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è")
        send_admin_mes("‚ùó –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ <b>QIWI</b> ‚ùó")
        return

    item = database.get_item_by_id(item_id)

    item_name = item[1]
    item_price = int(item[3]) * count_buy
    count = item[6]

    if pay_method == "qiwi":
        num = qiwi.num
        comment, pay_link = qiwi.create_link(item_price)
    elif pay_method == "yoo":
        num = yoomoney.num
        comment, pay_link = yoomoney.create_link(item_price)

    if count > 0:
        booking.add_booking(message.chat.id, item_name, database.get_items_id(item_name, count_buy))

        message_pay = string_help.get_buy_message(item_name, num, comment, item_price)

        selected_item = f"selected_item={item_id}"

        if item_id is None:
            item_id = database.get_item(data[1])[0]

        check = f"check_pay={pay_method}|{comment}|{item_id}|{count_buy}"

        keyboard = keyboards.create_check_buttons(pay_link, check, selected_item)
        bot.send_message(message.chat.id, message_pay, reply_markup=keyboard)
    else:
        bot.send_message(message.chat.id, "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ —Å–µ–π—á–∞—Å –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏")


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
# –ù–∞–∑–≤–∞–Ω–∏–µ
def add_item_name(message):
    name = message.text
    if not_const(name):
        item_creator.name = name
        bot.send_message(message.from_user.id, "‚úè –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
        bot.register_next_step_handler(message, add_item_desc)
    else:
        bot.reply_to(message, "‚ùó –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö ‚ùó\nüìö –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
        bot.register_next_step_handler(message, add_item_name)


# –û–ø–∏—Å–∞–Ω–∏–µ
def add_item_desc(message):
    desc = message.text
    if not_const(desc):
        item_creator.desc = desc
        bot.send_message(message.from_user.id, "üíµ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ (–≤ —Ä—É–±–ª—è—Ö)")
        bot.register_next_step_handler(message, add_item_price)
    else:
        bot.reply_to(message, "‚ùó –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö ‚ùó\n‚úè –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
        bot.register_next_step_handler(message, add_item_desc)


# –¶–µ–Ω–∞
def add_item_price(message):
    try:
        price = int(message.text)
        if not_const(price):
            item_creator.price = price
            bot.send_message(message.from_user.id, "üîê –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ \n*–û–¥–∏–Ω —Ç–æ–≤–∞—Ä - –û–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞* \n"
                                                   "üíæ –ò–ª–∏ –∂–µ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∞—Ä—Ö–∏–≤ –∏–ª–∏ —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–æ–º")
            bot.register_next_step_handler(message, add_item_data)
        else:
            bot.reply_to(message, "‚ùó –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö ‚ùó\nüíµ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ (–≤ —Ä—É–±–ª—è—Ö)")
            bot.register_next_step_handler(message, add_item_price)
    except Exception:
        bot.reply_to(message, "‚ùó –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö ‚ùó\nüíµ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ (–≤ —Ä—É–±–ª—è—Ö)")
        bot.register_next_step_handler(message, add_item_price)


# –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤
def add_item_data(message: telebot.types.Message):
    if message.document is not None:
        # –∞—Ä—Ö–∏–≤
        try:
            file_info = bot.get_file(message.document.file_id)
            file_info = file_info.wait()
            downloaded_file = bot.download_file(file_info.file_path)
            downloaded_file = downloaded_file.wait()

            folder = f"items"
            if not os.path.exists(folder):
                os.mkdir(folder)

            src = f"{folder}/{message.document.file_name}"
            with open(src, 'wb') as new_file:
                new_file.write(downloaded_file)

            item_creator.data = f"[file]={src}"
        except Exception:
            bot.send_message(message.from_user.id, "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ‚ùó")
            return

        item_creator.input_file()
        bot.send_message(message.chat.id, "üì¶ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω")
    else:
        # —Ç–µ–∫—Å—Ç
        item_creator.data = str(message.text).split("\n")
        item_creator.input_item()
        count = len(item_creator.data)

        bot.send_message(message.from_user.id, string_help.get_text_itmes(count))


# # # # # # # #
# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
# –ù–∞–∑–≤–∞–Ω–∏–µ
def edit_name(message):
    new_name = message.text
    if not_const(new_name):
        item_editor.update_name(new_name)
        bot.send_message(message.from_user.id, "üìù –ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æ")
        get_item_msg(message, item_editor.id)
    else:
        bot.send_message(message.from_user.id, "‚ùó –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö ‚ùó")
        get_item_msg(message, item_editor.id)


# –û–ø–∏—Å–∞–Ω–∏–µ
def edit_desc(message):
    new_desc = message.text
    if not_const(new_desc):
        item_editor.update_desc(new_desc)
        bot.send_message(message.from_user.id, "üìù –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ")
        get_item_msg(message, item_editor.id)
    else:
        bot.send_message(message.from_user.id, "‚ùó –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö ‚ùó")
        get_item_msg(message, item_editor.id)


# –¶–µ–Ω–∞
def edit_price(message):
    if not_const(message.text):
        try:
            new_price = int(message.text)
            item_editor.update_price(new_price)
            bot.send_message(message.from_user.id, "üìù –¶–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∞")
            get_item_msg(message, item_editor.id)
        except ValueError:
            bot.send_message(message.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É")
            bot.register_next_step_handler(message, edit_price)
    else:
        bot.send_message(message.from_user.id, "‚ùó –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö ‚ùó")
        get_item_msg(message, item_editor.id)


# –î–∞–Ω–Ω—ã–µ
def edit_data(message):
    if not_const(message.text):
        item_editor.update_data(message.text)
        bot.send_message(message.from_user.id, "üìù –î–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω—ã")
        get_item_data(message, item_editor.id_edit)
    else:
        bot.send_message(message.from_user.id, "‚ùó –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö ‚ùó")
        get_item_msg(message, item_editor.id)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
@bot.message_handler(content_types=['document'])
def add_data(message):
    if item_editor.name == "":
        return

    if message.document is not None:
        # –∞—Ä—Ö–∏–≤
        try:
            file_info = bot.get_file(message.document.file_id)
            file_info = file_info.wait()
            downloaded_file = bot.download_file(file_info.file_path)
            downloaded_file = downloaded_file.wait()

            folder = f"items"
            if not os.path.exists(folder):
                os.mkdir(folder)

            src = f"{folder}/{message.document.file_name}"
            with open(src, 'wb') as new_file:
                new_file.write(downloaded_file)

            file_data = f"[file]={src}"
        except Exception as e:
            bot.send_message(message.from_user.id, f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ‚ùó")
            return

        item_editor.add_file(file_data)
        bot.send_message(message.chat.id, "üì¶ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω")
    else:
        # —Ç–µ–∫—Å—Ç
        data = str(message.text)
        data_list = data.split("\n")

        count = len(data_list)
        item_editor.add_data(data_list)
        bot.send_message(message.from_user.id, string_help.get_text_itmes(count))
        get_item_msg(message, item_editor.id)


       



# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    while True:
        try:
            print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
            bot.polling(none_stop=True)
        except Exception as e:
            send_admin_mes(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ ‚ùó\n<b>{e}</b>\n‚ùó –ù–µ–æ–±—Ö–æ–¥–∏–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ ‚ùó")
            sys.exit()
